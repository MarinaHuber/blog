<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS Engineering</title>
    <description></description>
    <link>http://localhost:4000/blog/</link>
    <atom:link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 19 Jun 2024 22:17:04 +0200</pubDate>
    <lastBuildDate>Wed, 19 Jun 2024 22:17:04 +0200</lastBuildDate>
    <generator>Jekyll v3.9.5</generator>
    
      <item>
        <title>All things localization</title>
        <description>&lt;p&gt;Where to begin! Where to begin‚Ä¶&lt;/p&gt;

&lt;p&gt;Localisation is something that occurs in every project I encounter. &lt;br /&gt;
I found that having a list of useful tips that cover most aspect of localisation is essential, 
so that is why I created this post and is in progress.
There is a slight distinction between internationalization and localization:
Internationalization ‚Äî the process of making your app able to adapt to different languages, regions, and cultures.
Localization ‚Äî the process of translating your app into multiple languages.
So, in total it depends on context, and namely on the following elements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;user gender&lt;/li&gt;
  &lt;li&gt;singular and plural in the text&lt;/li&gt;
  &lt;li&gt;platforms: Web, Android, iOS&lt;/li&gt;
  &lt;li&gt;the project for which the translation is being done.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;the-problem--app-store&quot;&gt;The Problem &amp;amp; App Store:&lt;/h3&gt;

&lt;p&gt;In Apple ecosystem if the developer needs to modify any content of the language file, 
the changes needs to be updated in the project and the app needs re-submission.
 Also have you been in that situation where you have pushed a spelling mistake 
 to the App Store? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;( ‚óç‚Ä¢·¥ó‚Ä¢‚óç)&lt;/code&gt;
ü§üüèΩ There are at least three ways of translating you app.
1 . Custom solution with web service that contains JSON file with translation for all platforms needed.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Dynamically translating it with third party services like Crowdin, Azure Translator, Applanga, BartyCrouch list is long.&lt;/li&gt;
  &lt;li&gt;Importing/exporting .string files into Xcode project manually
-exporting Localization Catalog .xcloc containing good old XLIFF file&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Solution 1:
Custom web service with JSON downloaded on the app launch.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create small service- in the app you can request the language the device needs and listen to any changes that might occur (simple Firebase DB or any custom robust server with .json file there)&lt;/li&gt;
  &lt;li&gt;During the launch wait until you have received a response from web service before you display anything to the user.&lt;/li&gt;
  &lt;li&gt;Or, if you do not want to rely on the devices connection, then you can preinstall the dictionary by adding the .json file to the bundles resources and preload on app startup.
This can be pretty straight forward. An this is example how your .json file can be formatted. https://simplelocalize.io/docs/file-formats/single-language-json/
Managing the translation into dictionary of strings and reusing it with string extention:
```public class LocalizationService {&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;static var localisation: [String: Any]?&lt;/p&gt;

&lt;p&gt;class func getString(with key: String) -&amp;gt; String {&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  let missingError = UIDevice.isProduction ? &quot;&quot;: String(format: &quot;Missing string for key: %@&quot;, key)
  guard let localisation = shared.localisation as NSDictionary? else { return missingError }      
  let localisedString = localisation.value(forKeyPath: key) as? String
  return localisedString ?? missingError    } }```
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;```public extension String {
   var localised: String {
      return LocalizationService.getStringForKey(with: self)
   }
   }&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
Note: this is a starting point code reference
Solution 2:
Third party solution and their tradeoffs.
* 		BartyCrouch, Open source project
brew uninstall bartycrouch
Using BartyCrouch and running a few commands from the command line what can even be automated, 
using a build script within your project.
Pros:
in order to keep your Storyboards/XIBs Strings files updated over time
2. make sure your Localizable.strings files stay updated with newly added keys in code 
using NSLocalizedString and show warnings for duplicate keys or empty values
3. use the machine translation feature of Microsoft Translator Text API via translate
4. let BartyCrouch translate it to all supported languages in a single line &amp;amp; 
without ever leaving the code.
Important : Localization Workflow via transform- of BartyCrouch formatted localized Strings 
are not supported by this automatic feature.
Transform from NSLocalizedString or BartyCrouch.translate doesn‚Äôt support the new LocalizedStringKey type yet. 
Not ready to be used in SwiftUI fully (more in this issue)
Steps for BartyCrouch translate:
* 		Set up Azure (the GLOBAL configuration is the option that takes (location) of all near by servers is fastest)
* 		Run the update script in the Compile Sources -
Had some issue here as I am getting success in translation but no output. I posted on Github BartyCrouch OSS
NOTE:‚ùóÔ∏èTroubleshooting BartyCrouch error: no file found Library not loaded:libSwiftSyntax.dylib
* 		Translate feature: LiveDemo

2. Crowdin
I heard a lot of folks in iOS community using this service which is cloud-based localization platform for continuous software localization projects.
With Crowdin you have the option to work with freelance translators and volunteers but also aspecialized software localization company.
Up to 60,000 hosted words it is free of charge.

3. Applanga
Same as Crowdin but much better CI and automation delivery for native platforms.
Basic sunscription starts from 49$month.
Solution 3:
Static localization. No need to use key-based translations:
NSLocalizedString(‚ÄúText‚Äù, value: ‚ÄúHello World‚Äù, comment: ‚ÄúMain label‚Äù)
‚Üí From iOS15 there is no need to use key-based translations üíØ üíØ
Localisation got better from WWDC 2022
String(localised: ‚ÄúText‚Äù, defaultValue: ‚ÄúText‚Äù, comment: ‚ÄúThis is Text‚Äù)

There are omitted details of course, and there were things we needed to figure
out (such as auth, via `next-auth`, and passing runtime ENV secrets to our
Dockerized container), but in any case this gave us a lot of confidence to start
discussing what it might take to seriously consider rebuilding our internal
tools app. A few meetings later it was decided, and our platform team agreed to
take it (with loose backup support from a couple other engineers). And a few
short month's later much of the core functionality was complete, executed by a
team working amidst unfamiliar terrain.

That's the definition of success, and the measure. With our internal tools app
complete it was natural to start looking around for other opportunities -- but
first, a quick detour.

### Enter: Workflow (aka, The `app` default)

U
sually we will start with english as the base language as default, then slowly adding more language support on top of it. Before using any tools we need to prepare our app for DEFAULT language.
By default, a base language will be provided by Xcode, i.e, english. This base language will act as a fallback language if any localizable content is not found. In my test project since I am not using localized STORYBOARDS DefaultLocalizable.string file is the default English language that must contain all the text of the app for fallback.
* 		Create Localizable.string file
* 		Always wrap user-facing strings with (iOS13&amp;amp;14) NSLocalizedString or (from iOS 15+) String(localized:)
* 		Create IBDesignables to add storyboards UI to code
* 		Created swift script called LocalizationScript.swift that takes all Localizable.strings and creates enum from it (this script reads Localizable.sting file and can not distinguish comments from text to translate)
Few tips from session @Apple Localization Lab:
Create Localizable.string file
Always wrap user-facing strings with (iOS13&amp;amp;14) NSLocalizedString or
From iOS 15+ String(localized:)
Create IBDesignables to add storyboards UI to code
Note: Will detect the App language:
NSLocalizedString() ‚Üí short for Bundle.main.localizedString()
Exporting for localization in SwiftUI
New Xcode project build settings Use Compiler to Extract Swift Strings
Once active, before exporting strings for localization, Xcode will build all project targets and use the compiler type information to extract LocalizedStringKeys from your SwiftUI code
In Xcode 13+ .xcloc a.k.a. Xcode Localization Catalogs can be opened directly in Xcode with the new Localization Catalog Editor ü§ôüèΩ
Needs to be set to YES if project uses SwiftUI for Exporting all targets in Catalog
This is the file it will expose into: en.xclocc
You can use comments for easier translation all and more here
Spanish &amp;amp; English language got a new custom Markdown
The main purpose of Automatic Grammar Agreement however, to make the translation of plural and gendered texts
so far better to use stringdict
All edge cases:
Localization of dynamic text
Check the current running application language, if it is Spanish than show the Spanish text, else show the English one.
In case the strings are coming from the internet server:
Bundle.main.preferredLocatizations.first
Plural and Gender Support
using .stringdict
String.localizedStringWithFormat(formatString, count)
If you try to translate English phrases word-for-word into Spanish or German, they will make no sense. For this reason, you may need to create more than one version of each string and write instructions about which variant should be used.
Gender and personalisation:
Using date, currencies and number formatters
More
Dates
Unicode.org for TEMPLATES ‚Üí http://www.unicode.org/reports/tr35/tr35-31/tr35.html
use templates : more make data user-friendly
dateFormatter.locale = Locale(identifier: Locale.preferredLanguages.first ?? ‚Äúen‚Äù)
or use the current locale of the app it is the same result
dateFormatter.locale = .current
Dynamic Dates
coming from translated server
let allServerLanguages = [‚Äùen‚Äù, ‚Äúes‚Äù, ‚Äúde‚Äù, ‚Äúit‚Äù]
let language = Bundle.preferredLocalizations(from: allServerLanguages).first

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;app/
‚Äî- layout.tsx
‚Äî- page.tsx&lt;/li&gt;
  &lt;li&gt;app/artist
‚Äî- layout.tsx
‚Äî- page.tsx
‚Äî- middleware.tsx
```&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And so on. ‚ÄúGlobal‚Äù SSR data could be fetched right there in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt;
and shared with its subtree; and likewise, for sub-sub-tree‚Äôs we could do the
same in each individual app &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;layout&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;page&lt;/code&gt; component.&lt;/p&gt;

&lt;p&gt;Additionally, with React Server Components, we would no longer need to use many
Next.js-specific APIs. To fetch data on the server, you simply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;await&lt;/code&gt; a promise
and pass it right to your component as props. Next‚Äôs already minimal API
footprint would diminish even further, and it became possible to glean a vision
of ‚Äújust vanilla JS‚Äù all the way down, and within that vision the possibility of
true simplicity.&lt;/p&gt;

&lt;p&gt;Little did we know, it wouldn‚Äôt take much to turn this beautiful vision into
something of a dilemma, but that part of the story comes a bit later.&lt;/p&gt;

&lt;h3 id=&quot;expanding-nextjs-at-artsy&quot;&gt;Expanding Next.js at Artsy&lt;/h3&gt;

&lt;p&gt;Coming off of our success with the internal tools app rebuild, we wanted more.
And we didn‚Äôt need to look far: right around the corner was a ~10 year old
external CMS app that our partners use to manage their inventory.&lt;/p&gt;

&lt;p&gt;We decided the path forward was Next, and like our internal tools app rebuild,
for the most part it has been a success. We again went with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pages&lt;/code&gt; router
(as the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; router wasn‚Äôt yet released) and so far there‚Äôs been minimal
confusion from the team. And buisness-wise, its been refreshing to defer
framework design decisions, lib upgrades and more to Next, versus having to
maintain &lt;a href=&quot;https://github.com/artsy/force&quot;&gt;all of these things in-house&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It‚Äôs also worth mentioning that there &lt;em&gt;have&lt;/em&gt; been a few significant challenges
involved (such as setting up performant SSR patterns for using Relay, our
GraphQL client ‚Äì thats another blog post), but on the whole Next has served our
needs well. Team performance was unlocked, and we‚Äôve been able to quickly get to
building and rebuilding CMS pages in this new application. And our engineers
have loved working in it.&lt;/p&gt;

&lt;h3 id=&quot;back-to-next-13&quot;&gt;Back to Next 13&lt;/h3&gt;

&lt;p&gt;In the meantime, Next 13 was released. Imagine our excitement! Just as this new
app is spinning up we receive a little gift from the stars. Carlos and I are the
first ones to bite; lets see what migrating our work over to the new framework
might look like, what kind of effort.&lt;/p&gt;

&lt;p&gt;From the start, it was immediately obvious that the Next.js team released an
alpha-quality (or less) product, marked as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stable&lt;/code&gt;. Not a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;beta&lt;/code&gt;, not an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RC&lt;/code&gt;
to peruse and experiment with, but rather an&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;next
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;package that comes with an application scaffold generator that suggests using
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; router over &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pages&lt;/code&gt; ‚Äì marked as &lt;em&gt;‚ÄúRecommended‚Äù&lt;/em&gt;. In other words,
highly polished. And what‚Äôs the first thing one experiences?
&lt;a href=&quot;https://www.google.com/search?q=next+13+hot+reloading+broken+site:github.com&amp;amp;sca_esv=b6c25dbec4ffd71b&amp;amp;sa=X&amp;amp;ved=2ahUKEwjlmtTR_eKEAxW4CjQIHTqPAJYQrQIoBHoECBgQBQ&amp;amp;biw=1512&amp;amp;bih=829&amp;amp;dpr=2#ip=1&quot;&gt;Hot Reloading is broken&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And what‚Äôs the next thing? Styles are broken. It turns out that RSC (React
Server Components) doesn‚Äôt fully support pre-existing CSS-in-JS patterns. Or
rather,
&lt;a href=&quot;https://nextjs.org/docs/app/building-your-application/styling/css-in-js#styled-components&quot;&gt;they do, kind of&lt;/a&gt;,
but they can only be used inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use client&lt;/code&gt; components (which, in Next.js,
actually means a server-side rendered component environment that‚Äôs &lt;em&gt;separate
from&lt;/em&gt; a RSC rendered ‚Äúserver-only‚Äù environment ‚Äì aka the old pages router
model). And we certainly weren‚Äôt about to throw out our Design System component
library &lt;a href=&quot;https://github.com/artsy/palette&quot;&gt;Palette&lt;/a&gt;, which has been nothing but
a runaway success (and a
&lt;a href=&quot;https://github.com/artsy/palette-mobile&quot;&gt;highly portable one&lt;/a&gt; at that).&lt;/p&gt;

&lt;p&gt;With this limitation, our ability to use React Server Components had been
severely hampered. Excluding the root-most level of our component tree, we were
now required to prepend &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use client&lt;/code&gt; on the top of every component, lest we
receive ambiguous errors about rendering a client component (which used to be
server-side render safe) on the ‚ÄúRSC server‚Äù.&lt;/p&gt;

&lt;p&gt;Things can be taught, however. So lets proceed from the assumption that through
some kind of tooling / linting layer, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use client&lt;/code&gt; is added to every new
component. It &lt;em&gt;should&lt;/em&gt; behave at that point just like the old Next and now we
get the best of both worlds. Nope: turns out that even with the CSS-in-JS setup
instructions described in the the next docs above, we still run into issues.
There are bugs.&lt;/p&gt;

&lt;p&gt;(These are the two main red flags, but there are many others as well.)&lt;/p&gt;

&lt;p&gt;At this point, we wisely back out. It‚Äôs only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;next@13.0.0&lt;/code&gt;, and what they‚Äôre
doing here is to a certain extent revolutionary. It‚Äôs a new way of thinking
about React, yet an old way of thinking about page rendering. It‚Äôs like‚Ä¶ PHP,
or so they say. RSC is &lt;em&gt;interesting&lt;/em&gt;, there‚Äôs something to it. Lets give them
the benefit of the doubt and return to things in a few months, after a few
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minor&lt;/code&gt; version bumps; there are, after all, countless eyes on the project.&lt;/p&gt;

&lt;h3 id=&quot;many-months-later&quot;&gt;Many Months Later&lt;/h3&gt;

&lt;p&gt;We run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npx create-next-app@latest&lt;/code&gt; (this is around the time they release
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;13.4&lt;/code&gt;) and then add these two components inside the newly-created vanilla
project:&lt;/p&gt;

&lt;div class=&quot;language-tsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// app/HelloClient.tsx&lt;/span&gt;
&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;use client&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Does this hot reload&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// app/layout.tsx&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./HelloClient&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HelloClient&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Everything renders. And then&lt;/p&gt;

&lt;div class=&quot;language-tsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;HelloClient&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;Does this hot reload... nope :(&lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the most basic project setup, the most obvious Next.js selling point ‚Äì
Developer Experience ‚Äì failed to deliver. Vercel is really forcing us to
question things. But we‚Äôre flexible, and we like to investigate at Artsy, so
even though this definitely-required feature doesn‚Äôt quite work, maybe it will
once we‚Äôre done with our migration spike, and maybe we can still take advantage
of everything else that RSC has to offer.&lt;/p&gt;

&lt;p&gt;So again, we start refactoring the project. Stuff from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pages&lt;/code&gt; directory
starts getting copied over to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt;. We update configuration. We setup styling
(it seems to work better). Things are &lt;em&gt;almost&lt;/em&gt; there. But then the obscure
framework errors start to arrive, and CSS still doesn‚Äôt quite work: it turns out
that refactoring across RSC-&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use client&lt;/code&gt; boundaries is harder than one thought.
I.e., if any piece of ‚Äúclient‚Äù (remember, ‚Äòuse client‚Äô actually means SSR-safe)
code &lt;em&gt;anywhere in the dependency tree&lt;/em&gt; happens to intersect an RSC boundary, the
whole thing will fail. And this includes any use of React‚Äôs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;createContext&lt;/code&gt; ‚Äì
because React Contexts aren‚Äôt supported. Given an app of any reasonable size,
you‚Äôre likely to rely on a context somewhere, as contexts are so critical within
the react hooks model of behavior. Said contexts might come from within your
app, and if not there they‚Äôll certainly come from a 3rd party library.&lt;/p&gt;

&lt;p&gt;One would expect the errors to be helpful in tracking this down ‚Äì Next.js is
all about DX ‚Äì but no. Confusion reigns.&lt;/p&gt;

&lt;p&gt;We‚Äôre experts though, and we eventually &lt;em&gt;do&lt;/em&gt; find the source of the violation,
and we make sure to create a ‚Äúsafety wrapper‚Äù around the offender so that it
doesn‚Äôt happen again. But it does happens again ‚Äì and again, any time any piece
of any complexity is added in the new RSC-intersected route. It‚Äôs rather
unavoidable. And each time solvable, but at a great cost to the developer.
Thankfully we know what we‚Äôre doing!&lt;/p&gt;

&lt;p&gt;Another trivial yet annoying issue (thankfully fixed with some custom eslint
config) is accidentally importing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useRouter&lt;/code&gt; hook from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; router
location, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redirect&lt;/code&gt;, or any number of other new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; router features,
because all of these things don‚Äôt work in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pages&lt;/code&gt;, and will error out. The
errors here are slightly less opaque, but what if you‚Äôre a backend dev who knows
nothing about any of this? Googling ‚ÄúuseRouter next‚Äù now yields two sets of
docs. Figure it out.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
  &lt;img src=&quot;https://miro.medium.com/v2/resize:fit:1400/0*Sce5egkhwWpCeqF0.jpg&quot; width=&quot;600&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;At this point, we make a judgement call: this simply isn‚Äôt going to work at
Artsy. We‚Äôre here to empower folks and unlock productivity. Remember the team of
DevOps engineers on Platform who rebuilt a CMS in record time? In the new Next
13 model, that would be unfathomable, impossible even. Paper cuts would kill
motivation, and dishearten the already skeptical. And the front end already has
a bad rap, for good reason: historically, everything that seems like it should
be easy is hard and confusing for those who aren‚Äôt experts. And everything is
always changing. And the tooling is always breaking. And everybody always has a
bright new idea, one that will finally end this madness for good.&lt;/p&gt;

&lt;p&gt;A certain amount of sadness is appropriate here, because Next‚Äôs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pages&lt;/code&gt; router
was very, very close to being the silver bullet for web applications that we‚Äôve
all been looking for. Even though the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pages&lt;/code&gt; router has its flaws, it showed us
that it‚Äôs possible to get something out the door very quickly with little prior
knowledge of Front End development. This is no small thing. Next 13‚Äôs fatal
error is that its destiny, being coupled to RSC, now requires experts. And by
‚Äòexpert‚Äô I mean: those with many years of experience dealing with JavaScript‚Äôs
whims, its complex eco-system, its changeover, as well as its problems. In
short, folks who have become numb to it all. This is no way to work.
&lt;a href=&quot;https://www.reddit.com/r/nextjs/comments/1abd6wm/hitler_tried_rsc_and_next_14/&quot;&gt;Thankfully the community is finally responding&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;a-quick-note-on-performance&quot;&gt;A Quick Note on Performance&lt;/h3&gt;

&lt;p&gt;It‚Äôs worth remembering that Next 12 was industry-leading in terms of performance
and pioneered many innovative solutions. Let me say it again: Next‚Äôs pages
router IS fast. Next 13 combined with RSC &lt;em&gt;is&lt;/em&gt; faster, but at what point does an
obsession with performance start negating other crucial factors? What‚Äôs good for
the 90%? And what‚Äôs required for the other 10%? Most companies just need
something that‚Äôs fast enough ‚Äì and easy enough ‚Äì to &lt;em&gt;move&lt;/em&gt; fast. And not much
more.&lt;/p&gt;

&lt;h3 id=&quot;back-at-artsy&quot;&gt;Back At Artsy‚Ä¶&lt;/h3&gt;

&lt;p&gt;With all of this in mind, and with the uncertainty around long-term support for
Next.js &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pages&lt;/code&gt; (amongst other things), we recently decided to hit pause on
future development in our new external CMS app rebuild. Weighing a few different
factors (many entirely unrelated to Next), including a team reorg that allowed
us to look more closely (and fix) the DX in our old external CMS app, we took a
step back and recognized that our needs are actually quite minimal:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instant hot reloading&lt;/li&gt;
  &lt;li&gt;Fast, SPA-like UX performance&lt;/li&gt;
  &lt;li&gt;Simple, convention-based file organization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these things covered, the ‚Äúweb framework‚Äù layer looks something like the
following, minus a few underlying router lib details:&lt;/p&gt;

&lt;div class=&quot;language-tsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Router&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createRouter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;history&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./Foo&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;/bar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;lazy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;./Bar&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We‚Äôre now required to manage our compiler config, but
&lt;a href=&quot;https://github.com/shakacode/shakapacker&quot;&gt;that layer&lt;/a&gt; isn‚Äôt too complicated
once its setup, and it works great. (If you‚Äôre using something like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vite&lt;/code&gt;, it
could be even simpler.)&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;

&lt;p&gt;Next 13 and React Server Components are very intriguing; it‚Äôs a new model of
thinking that folks are still trying to work out. Like other revolutionary
technologies released by Meta, sometimes it takes a few years to catch on, and
maybe RSC is firmly in that bucket. Vercel, however, would do well to remember
Next‚Äôs original fundamental insight ‚Äì that all good things follow from
developer experience. Improvements there tend to improve things everywhere.&lt;/p&gt;

&lt;p&gt;In addition to fixing some of the obvious rough edges in the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; router,
it would be helpful if Next could provide an official response to
&lt;a href=&quot;https://github.com/vercel/next.js/discussions/56655&quot;&gt;the question of long-term Pages support&lt;/a&gt;.
There‚Äôs been quite a backlash in the community against Next 13, and that should
give all developers pause. It‚Äôd also be great to get word on whether there will
be any further development on the pages router ‚Äì perhaps some of the features
from the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; router can be migrated to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pages&lt;/code&gt; as well? ‚Äì or if the pages
router is officially deprecated and locked. All of this is currently ambiguous.&lt;/p&gt;

&lt;p&gt;Another area where Next could improve is their willingness to ship buggy
features, and to rely on patched versions of React in order to achieve certain
ends. Even though Vercel employs many members of the React Core team, by
releasing Next versions that rely on patched and augmented &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;canary&lt;/code&gt; builds of
React, Vercel is effectively compromising some of React‚Äôs integrity, and forcing
their hand. Once a neo-React feature is added to Next, it makes it hard to say
no; Next has captured too much of the market-share.&lt;/p&gt;

&lt;p&gt;All of this calls for sobriety and hesitation on the part of developers working
with ‚Äì and building companies on top of ‚Äì Vercel‚Äôs products. Next is Open
Source, yes, but it‚Äôs also a wildcard. Artsy has had some real success with
Next, but sometimes that‚Äôs just not enough to avoid hitting pause, and looking
at the bigger picture. Inclusivity should always win.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 Mar 2024 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/blog/blog/2024/03/07/nextjs-at-artsy-retrospective/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/blog/2024/03/07/nextjs-at-artsy-retrospective/</guid>
        
        
      </item>
    
      <item>
        <title>Short Swift design patterns ‚Äî for Newbies</title>
        <description>&lt;p&gt;OBJECTS VS. PROTOCOLS or functions
OOP is code that is grouped into object or a class. It is the foundation of lower level Obj-C languages 
(which still holds more than 80% of Xcode features). Equipped with specific characteristics, 
objects have the ability to communicate with other objects and can achieve advanced levels of functionality. 
They can also borrow (e.g. inherit) functionality from other objects/classes üî° üî†.
Protocol-Orientated Programming offers an alternate way to organize code. As the name implies, 
the model is based on objects conforming to various rules. Rule-based protocols can also be found in other languages 
\including Java and Objective-C. However, advancements in Swift take Protocols a step further by 
puting interfaces and composition ahead of inheritance. ect (allowing them to store actions (e.g. methods) for conforming types.)&lt;/p&gt;

&lt;!-- more --&gt;

&lt;ul class=&quot;task-list&quot;&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;GENERIC VS. SPECIFIC MODELS
This is central to Object-oriented programming, model abstract or generic things as opposed to concrete ones. 
Still this is pure engagement in uncertainty and fear‚Ä¶.Multiple objects need abstraction and old friend complexity üò≤üò± ‚Äî 
DRY and KISS principles. Opposed to Procedural programming like PHP üí§ ideas‚Ä¶ for some of these paradigms it is no surprise 
‚ÄúGoogle is said to be considering Swift as a ‚Äòfirst class‚Äô language for Android‚Äù
Generic type work as reusable templates. With parameters that must be descriptive, upper camel case names. 
When a type name doesn‚Äôt have a meaningful relationship or role, use generic upercase letter such as T, U, or V üßê.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enum ResultType&amp;lt;V&amp;gt; { case success(V) case failure(Error) }&lt;/code&gt;&lt;/li&gt;
  &lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; class=&quot;task-list-item-checkbox&quot; disabled=&quot;disabled&quot; /&gt;DELEGATION VS. NOTIFICATIONS in iOS
Delegation (Cocoa Touch) pattern assumes objects and models have shared-responsibility for actions.Delegates are meant for 1-on-1 relation, meaning that one object has a delegate and sends any messages to that one particular delegate(if the needs of the Delegate are simple consider callbacks). We need be sure we do not create a retain cycle between the delegate and the delegating objects, so we use a [weak self] reference to delegate in asynchronous code.
Notifications are based on a model of ‚Äúregistration and updates‚Äù so its basically meant for 1-to-many relation. Notifications create too much indirection and make your code hard to follow üßê. When you post a notification you cannot be sure which objects will intercept it, which might lead to unexpected behavior in your app. It is generally used when you want to update values in your view controller from any other viewController using didSet property setter ‚Äî observer (not always an elegant solution).
Conclution: Swift contains multiple paradigms in one language and Linux with server-side Swift is here as well. It is so young but fastly adopted language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here are few references: [link] (https://livebook.manning.com/book/classic-computer-science-problems-in-swift/introduction/)&lt;/p&gt;

</description>
        <pubDate>Wed, 13 Sep 2023 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/blog/2023/09/13/deploying-a-scary-change/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/blog/2023/09/13/deploying-a-scary-change/</guid>
        
        
        <category>Swift</category>
        
        <category>SOLID</category>
        
      </item>
    
      <item>
        <title>My why. The journey to a free market economy</title>
        <description>&lt;p&gt;To start with I would like to stress that English is not my native language and I am by no means a writer, 
so please bear with me as I share few of my thoughts and experience other people struggle with too.&lt;br /&gt;
I got into this thing back at my Uni, at interactive media class. I studied Design under the Architectural university 
and I found that rendering shapes and motion graphics intrigued me more than actual major study.
 With no compiler run time and just generating small websites seemed so much more to learn than actual study at the time. 
 So after study I moved abroad and got an internship at the Digital Design Studio DeMonsters working on flash and animations for AR.&lt;/p&gt;

&lt;p&gt;&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;IMAGE HERE&lt;/p&gt;

&lt;p&gt;Apart from my digital obsessions I also did all kinds of odd jobs living in Amsterdam ‚Ä¶ The most important decision I made in this period is to learn iOS development inside a BootCamp environment in 3 months period i created accountability and commitment to ObjactiveC and Swift. Here is where i got to meet the world of persistent storage, recursive functions, predicate algorithms and nib files. Fist two years where real hard, and if you are not ready to ASK many, many unanswered questions, prepare for the looong ride üò∞. This makes me think of how this discipline has several carefully crafted abstractions (legacy shit), one on top of the other. And slowly, we keep peeling apart the layers(onions üåΩ) and learning more and more about how our iOS software actually ticks.&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Mar 2023 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/blog/blog/2023/03/01/typescript-magic/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/blog/2023/03/01/typescript-magic/</guid>
        
        
        <category>Swift</category>
        
        <category>iOS</category>
        
        <category>Tools</category>
        
        <category>Mobila</category>
        
      </item>
    
      <item>
        <title>SwiftUI vs Auto Layout and frames</title>
        <description>&lt;p&gt;A
good section of this post is about the research + a project ‚ÄúDiagram‚Äù and steps I wish somebody told me upfront. Before I dive into Auto Layout, should I remind you also of legacy in frames üòù, masks ‚Äî you always had to tell buttons and other controls how big they should be, either by setting their frame or bounds properties or by resizing them in Interface Builder. But it turns out that most controls are perfectly capable of determining how much space they need, based on their ‚Äî content. üåàü¶Ñüåà
üïµÔ∏è‚Äç‚ôÄÔ∏è üïµÔ∏è‚Äç‚ôÄÔ∏è Note: There is a tool Scherlock ‚Äî it lets you edit views and layout constraints in real time, simulate running on other devices, and jump straight to the source code, all from your iOS Simulator ‚Äî zero configuration required only $$ after trial.&lt;/p&gt;

&lt;p&gt;Things I want to accomplish:‚èé
‚Äî Solve errors in layout IB Auto Layout
‚Äî Solve errors in code Auto Layout&lt;/p&gt;

&lt;!-- more --&gt;
&lt;p&gt;Note: Types of errors in Auto Layout:Unsatisfiable Layouts. Your layout has no valid solution. For more information, see Unsatisfiable Layouts.Ambiguous Layouts. Your layout has two or more possible solutions. For more information, see Ambiguous Layouts.Logical Errors.
üïµÔ∏è‚Äç‚ôÄÔ∏è üïµÔ∏è‚Äç‚ôÄÔ∏è Note: There is a tool WTFAutoLayout a place where you can decode the warrning messages.
‚Äî Demo the findings in project ‚ÄúDiagram‚Äù with IB + code constraints
Things I accomplished: ‚úÖ
‚Äî When and why to use AutoLayoutThis whole section could be ‚ÄúHow to understand blue, yellow and red lines‚Äù, but I‚Äôll go into each part separately.&lt;/p&gt;

&lt;p&gt;IMAGE HERE&lt;/p&gt;

&lt;p&gt;When and why to use IB Constraint?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When we want dynamic content.&lt;/li&gt;
  &lt;li&gt;Less code more constraints rules
Tip pic below: when to update and when to resolve constraints out of the box (Xcode)
`&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When and why to use NSLayout ConstraintNSLayout Constraint API is used when views needs to be synced programmatically. It is robust but stable API. You have three choices when it comes to programmatically creating constraints: You can use layout anchors, you can use the NSLayoutConstraint class, or you can use the Visual Format Language. But what we are interested here mostly is the User interface constraint system and Auto Layout. You can use handy frameworks like Snapkit &amp;amp; TinyConstraint to help with setting programmatic constraints.&lt;/p&gt;

&lt;h2 id=&quot;lets-dive-into-the-important-concepts-in-al--intrinsic-content-size&quot;&gt;Let‚Äôs dive into the important concepts in AL: ‚á® Intrinsic content size&lt;/h2&gt;

&lt;p&gt;UI Elements that have INTRINSIC CONTENT SIZE:‚á® UILabel, UIButton, Textfield, SwitchesHere is Apples Design Guide
Implementing both solutions works ‚Äî the intrinsicContentSize method as well as specify the intrinsic Size in Interface Builder. Because function is only determined at runtime, the interface builder needs some placeholder values to visualize the UI. Without entering those placeholder values into the interface builder, you may get some warnings about missing constrains. However, whatever you enter will be used as a placeholder only, the CGSize returned from the method intrinsicContentSize is still the actual value.
Example: the correct way for a view to specify views height is through intrinsicContentSize.&lt;/p&gt;

&lt;p&gt;Another concepts in AL: ‚á® Hugging / Compression Resistance
Hugging ‚á® content does not want to grow ‚Äî maxCompression Resistance ‚á® content does not want to shrink ‚Äî min&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How to remove the yellow lines and warnings:
Tip on concepts above: when yellow lines and warnings in debugger (Xcode) appear. Fixing it with setting last bottom constraint to lower priority is usually the trick.
ü§∑‚Äç ü§∑‚Äç‚ôÄÔ∏è ü§üü§üü§üü§ü
But this will break the view if the elements need to be animated or moved since every solution animates the constant property and not the priority. Here a workaround is to put a wrapper view, set wrapper.clipsToBounds = true, and animate wrapper‚Äôs constraint.
Conclusion
What ever approach you take keep in mind that written in code will be executed in runtime and override the IB rules. Other option that will not create so much confustion is to set all views in code. Down side to that its more timeconsuming and requires third party dependency in most cases. So keep the IB rules of basic structure:
~~ start constraints from top to bottom
~~ every element minimal 3‚Äì4 constraints
~~ use wrapper views when animating and self contained views
~~ uiview Subclass should never add constraints to its superview
If you have any suggestions or other comments, let me know below.
Here are some good reference in detail explained.
Auto layout best practices for minimum pain
Auto layout is a great tool, it helps keep our sanity as developer, and it prevent us lazy people from using magic‚Ä¶&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 10 Feb 2023 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/blog/blog/2023/02/10/mongo-geospatial-queries/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/blog/2023/02/10/mongo-geospatial-queries/</guid>
        
        
        <category>UI</category>
        
        <category>UX</category>
        
        <category>Animation</category>
        
      </item>
    
      <item>
        <title>Short thoughts dumped on JSON parsing in Swift 5</title>
        <description>&lt;p&gt;Networking code can definitely be improved. Thanks Apple! No third parties here!
üëå So since Swift 4 we got Codable with Decodable and Encodable protocols that 
provide support for native class (reference type), struct and enum as well (value types) all concrete data types‚Ä¶&lt;/p&gt;

&lt;p&gt;First of all Codable is defined as typealias Codable = Decodable &amp;amp; Encodable and we go for two required protocols:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Decodable: to parse JSON (get response)&lt;/li&gt;
  &lt;li&gt;By decoding the JSONData we will receive/read the data
    &lt;ol&gt;
      &lt;li&gt;Encodable: to generate JSON (post response)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;To convert your codable type into Data.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;in-practice&quot;&gt;In practice&lt;/h2&gt;
&lt;p&gt;It works with primitive types (Int, String and Float etc.), some Foundation types (Data, URL, Date etc.) as well as with arrays, dictionaries and optionals(Enums).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;NSData&lt;/li&gt;
  &lt;li&gt;NSString&lt;/li&gt;
  &lt;li&gt;NSNumber
    &lt;ul&gt;
      &lt;li&gt;UInt&lt;/li&gt;
      &lt;li&gt;Int&lt;/li&gt;
      &lt;li&gt;Float&lt;/li&gt;
      &lt;li&gt;Double&lt;/li&gt;
      &lt;li&gt;Bool&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NSDate&lt;/li&gt;
  &lt;li&gt;NSArray&lt;/li&gt;
  &lt;li&gt;NSDictionary
Why?&lt;/li&gt;
  &lt;li&gt;To simplify dependencies in our Data Manager&lt;/li&gt;
  &lt;li&gt;Converting data structures to JSON data has never been easier(hmmmm..), allowing developers to store JSON data to disk or encode it into a URLRequest‚Äôs httpBody.
You can write an app that uses JSON from an external source or tests from a stub. The start problem here the inconsistencies between the structure of the concepts you‚Äôre modeling in your app and concepts modeled by the producer of the JSON. Some examples of changing and using JSON structure in your app:&lt;/li&gt;
  &lt;li&gt;Change name properties with CodingKey
    &lt;ol&gt;
      &lt;li&gt;Simplify the complex structure with Encoding and Decoding manually üìù&lt;/li&gt;
      &lt;li&gt;Work with Nested Data (array inside of an array JSON)
For 1. even tho we do not have to parse every element of JSON representation, we need to create properties with same name as in JSON Data or rename them with CodingKey for direct persistent storage for basic examples. Easy peasy so far! ü§†ü§†
Essential tasks here at the object level:&lt;/li&gt;
      &lt;li&gt;Identify Objects&lt;/li&gt;
      &lt;li&gt;Use nested type for supporting or to hide complexity
üÉè‚ô¶Ô∏èüÉè
struct SurfBoard: Codable {
 var brand: String
 var size: Size&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum CodingKeys: String, CodingKey {
    case brand = &quot;name&quot;
    case size
} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;struct Size: Codable {
    var width: Double
    var height: Double
}
Note: For JSON properties that declares in NULL element we need to mirror that instance with ‚ùìOptional. This way, data isn‚Äôt silently lost as a result of typos or a misunderstanding of the guarantees made by the provider of the JSON.
For 2. in that case, you can provide your own custom logic üìù of Encodable and Decodable to define your own encoding and decoding logic. You need to implement encode(to:) and init(from:) methods of Encodable and Decodable protocols explicitly.
On that note:
The tool that I find very useful in creating model structs faster is QuickType which is a desktop application that turns JSON into Codable with typealias for collections. I use it with copyright in comments and Equatable and Hashable protocols for making sure that collection is not duplicated‚Ä¶
Here is when the JSON goes wild and we need to taim it:
struct SurfBoard {
    var brand: String
    var size: Size&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum CodingKeys: String, CodingKey {
    case brand = &quot;name&quot;
    case width
    case height
} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;extension SurfBoard: Encodable {
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(brand, forKey: .title)
        try container.encode(size.width, forKey: .width)
        try container.encode(size.height, forKey: .height)
    }
}&lt;/p&gt;

&lt;p&gt;extension SurfBoard: Decodable {
    init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        brand = try values.decode(String.self, forKey: .brand)
        let width = try values.decode(Double.self, forKey: .width)
        let height = try values.decode(Double.self, forKey: .height)
        size = Size(width: width, height: height)
    }
}
You can get nice use scenario here and here ‚úÖ.
For 3. in that case of Nested Data you need to decode and read the JSON. The decodable type serves as an intermediate type that‚Äôs safe to decode. It serves as the data source in an initializer for the type that you‚Äôll use in the rest of your app.
//Swift structural incompatibility with external JSON
struct SurfBoard {
    var brand: String
    var products: [Products]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Products: Codable {
    var name: String
    var points: Int
    var description: String?
} } The JSON returned by the API contains more information than is needed to populate the corresponding Swift type. //Swift structure that we need for the nested Arrays struct SurfBoard: Decodable {
let brand: String
let aisles: [Aisle]
struct Aisle: Decodable {
    let name: String
    let shelves: [Shelf]
    struct Shelf: Decodable {
       let name: String
       let product: SurfStore.Product
    }
} } The extension adds an initializer that takes a SurfBoardService instance and removes the unnecessary nesting by looping through and discarding the aisles and shelves. To extract the data you need from the outer array, you write a type that mirrors the shape of the source JSON and mark it as Decodable. Then, write an initializer on the type you‚Äôll use in the rest of your app that takes an instance of the type that mirrors the source JSON. extension SurfStore {
init(from service: SurfBoardService) {
     brand = service.brand
     products = []
     for aisle in service.aisles {
       for shelf in aisle.shelves {
         products.append(shelf.product)
        }
     }
 }  } On that note: Extensions can only provide convenience initializers * 		Initializers that are implemented as a result of protocol conformance must be marked as required(on classes). * 		required init can only be implemented within the body of a class. * 		Structs can have initializers in extensions because there is no inheritance. AND FINALLY READ THE NESTED JSON‚Ä¶ let decoder = JSONDecoder() let serviceStores = try decoder.decode([SurfBoardService].self,        from: json)
 let stores = serviceStores.compactMap { SurfBoard(from: $0) } for store in stores {
 print(&quot;\(store.name) is selling:&quot;)
for product in store.products { 
   print(&quot;\t\(product.name) (\(product.points) points)&quot;)
      if let description = product.description {
      print(&quot;\t\t\(description)&quot;)
 }    } } more in documentation: Merge Data from Different Depths Feel free to leave comments if you have any doubts üôÇ Thank you! Reference on: https://hackernoon.com/everything-about-codable-in-swift-4-97d0e18a2999 http://aplus.rs/2017/highly-maintainable-app-architecture/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 07 Sep 2022 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/blog/2022/09/07/quick-tips-to-speed-up-ci/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/blog/2022/09/07/quick-tips-to-speed-up-ci/</guid>
        
        
        <category>Networking</category>
        
        <category>Generics</category>
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Breaking the magic of Apple HealthKit API and Watch OS</title>
        <description>&lt;p&gt;Things I want to accomplished: ‚úÖ
Small tips on setup and easier use
lll
ppp
pp&lt;/p&gt;

&lt;p&gt;TO DO&lt;/p&gt;

&lt;!-- more --&gt;

</description>
        <pubDate>Tue, 23 Aug 2022 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/blog/2022/08/23/getting-around-7-day-cookie/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/blog/2022/08/23/getting-around-7-day-cookie/</guid>
        
        
        <category>Privacy</category>
        
        <category>Cookies</category>
        
        <category>GDPR</category>
        
        <category>CCPA</category>
        
      </item>
    
      <item>
        <title>Artsy's Culture Stack, 2017</title>
        <description>&lt;!-- This comes out of the tech stack 2017, and isn't up for review yet --&gt;

&lt;h1 id=&quot;people-and-culture&quot;&gt;People and Culture&lt;/h1&gt;

&lt;h2 id=&quot;open-source-by-default&quot;&gt;Open Source by Default&lt;/h2&gt;

&lt;p&gt;By the end of 2016, almost every major front-end application at Artsy was &lt;a href=&quot;http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&quot;&gt;Open Source by Default&lt;/a&gt;. This means looking for reasons for something to be closed-source as opposed to reasons to be open. Our entire working process is done in the open, from developer PRs to QA. This post was also written collaboratively and in the open as you can see &lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/325&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes it makes sense to keep some details private for competitive reasons. We therefore also create a private GitHub repository for front-end teams that require cross-project issues and team milestones. This is done using &lt;a href=&quot;https://www.zenhub.com&quot;&gt;ZenHub&lt;/a&gt;, and is managed by Engineering leads and Product Managers.&lt;/p&gt;

&lt;h2 id=&quot;developer-workflow&quot;&gt;Developer Workflow&lt;/h2&gt;

&lt;p&gt;Most development workflow tries to mimic large open-source project development where most work happens on forks and is pull-requested into an Artsy repository shared by everyone. Typically an engineer will start a project, application or service and is automatically its benevolent dictator. They will add continuous integration and will ask other engineers on the team to code review everything from day one. Others will join and entire teams may take over. Continuous deployment and other operational infrastructure will get setup early.&lt;/p&gt;

&lt;p&gt;In some of our newer apps we have switched to PR based deployments via CIs. In this case, on Artsy‚Äôs repository, we would have &lt;em&gt;master&lt;/em&gt; and &lt;em&gt;release&lt;/em&gt; branches where &lt;em&gt;master&lt;/em&gt; is the default branch and all the PRs are made to master. Once a PR is reviewed and merged to &lt;em&gt;master&lt;/em&gt; it will automatically get deployed on staging. Production deployment is a pull request from &lt;em&gt;master&lt;/em&gt; to a &lt;em&gt;release&lt;/em&gt; branch, this way we know what commits are going to be deployed in this release. Once merged, CI will automatically deploy the &lt;em&gt;release&lt;/em&gt; branch to production.&lt;/p&gt;

&lt;h2 id=&quot;slack&quot;&gt;Slack&lt;/h2&gt;

&lt;p&gt;Originally the engineering team used IRC, but in 2015 we switched to Slack and encouraged its use throughout the whole company. We‚Äôre now averaging about 16,000 Slack messages a day inside Artsy.&lt;/p&gt;

&lt;p&gt;Slack usage started out small, but as the Artsy team grew, so did the number of locations where people worked. Encouraging people to move from disparate private conversations in different messaging clients to using slack channels has really made it easier to keep people in the loop. It‚Äôs made it possible to have the serendipitous collaboration you get by overhearing something important nearby physically.&lt;/p&gt;

&lt;h2 id=&quot;global-engineering&quot;&gt;Global Engineering&lt;/h2&gt;

&lt;p&gt;While most Engineers live in New York, our Engineering team has contributors in Amsterdam, Berlin, Seattle, Minneapolis, Boston and London. We‚Äôve not shied away from hiring regardless of locations.&lt;/p&gt;

&lt;p&gt;To help people know each-other across the company we developed and open-sourced a &lt;a href=&quot;https://github.com/artsy/team-navigator&quot;&gt;team navigator&lt;/a&gt;. We also facilitate weekly meetings between any three people across the company with a tool called &lt;a href=&quot;https://github.com/ilyakava/sup&quot;&gt;sup&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Maybe worth mentioning that most of the channels shared between developers and other people at artsy(specialists, designers, product people, etc) which encourages collaboration and integration of art+technology as well. Also maybe worth mentioning that we have dedicated help channels per product team and well as company wide help channel.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 05 Mar 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/blog/blog/2017/03/05/artsy-engineering-culture-2017/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/blog/2017/03/05/artsy-engineering-culture-2017/</guid>
        
        
        <category>Technology</category>
        
        <category>eigen</category>
        
        <category>force</category>
        
        <category>gravity</category>
        
      </item>
    
  </channel>
</rss>
