<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS Engineering</title>
    <description></description>
    <link>http://localhost:4000/blog/</link>
    <atom:link href="http://localhost:4000/blog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 01 Jul 2024 21:26:27 +0200</pubDate>
    <lastBuildDate>Mon, 01 Jul 2024 21:26:27 +0200</lastBuildDate>
    <generator>Jekyll v3.9.5</generator>
    
      <item>
        <title>Avoid typos when publishing localized app to App Store</title>
        <description>&lt;p&gt;Where to begin! Where to begin…&lt;/p&gt;

&lt;p&gt;Localisation is something that occurs in every project I encounter. 
I found that having a list of useful tips that cover most aspect of localisation is nice to have, 
so I created this post as memory of current best and possible new practices.
There is a slight distinction between internationalization and localization:&lt;br /&gt;
Internationalization — the process of making your app able to adapt to different languages, regions, and cultures.&lt;br /&gt;
Localization — the process of translating your app into multiple languages.
So, in total it depends on context, and namely on the following established elements:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;User gender&lt;/li&gt;
  &lt;li&gt;Singular and plural in the text&lt;/li&gt;
  &lt;li&gt;Platforms: Web, Android, iOS&lt;/li&gt;
  &lt;li&gt;Project objective for which the translation is being done.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h4 id=&quot;the-problem--app-store&quot;&gt;The Problem &amp;amp; App Store:&lt;/h4&gt;

&lt;p&gt;In Apple ecosystem if the developer needs to modify any content of the language file, 
the changes needs to be updated in the project and the app needs re-submission.
 Also have you been in that situation where you have pushed a spelling mistake 
 to the App Store? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;( ◍•ᴗ•◍)&lt;/code&gt;
There are at least three ways of translating an app that I tried so far. Here are few solution and their tradeoffs.&lt;/p&gt;

&lt;p&gt;1 . Custom solution with web service that contains JSON file with translation for “all” platforms needed.&lt;/p&gt;

&lt;p&gt;2 . Dynamically translating it with third party services like Crowdin, Azure Translator, Applanga, BartyCrouch.&lt;/p&gt;

&lt;p&gt;3 . Importing/exporting .string files into Xcode project manually
-exporting Localization Catalog .xcloc containing good old XLIFF file and sending it to a translator - human.&lt;/p&gt;

&lt;h3 id=&quot;solution-1&quot;&gt;Solution 1:&lt;/h3&gt;
&lt;p&gt;Custom web service with JSON downloaded on the app launch.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create small service - in the app you can request the language the device needs and listen to any changes that might occur (simple Firebase DB or any custom robust server with .json file there)&lt;/li&gt;
  &lt;li&gt;During the launch wait until you have received a response from web service before you display anything to the user.&lt;/li&gt;
  &lt;li&gt;Or, if you do not want to rely on the devices connection, then you can preinstall the dictionary by adding the .json file to the bundles resources and preload on app startup.
This can be pretty straight forward. An this is example how your .json file can be &lt;a href=&quot;https://simplelocalize.io/docs/file-formats/single-language-json/&quot;&gt;formatted&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Managing the translation into dictionary of strings and reusing it with string extention:&lt;/p&gt;

&lt;div class=&quot;language-tsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LocalizationService&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localisation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt;

   &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;missingError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UIDevice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isProduction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Missing string for key: %@&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localisation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shared&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;localisation&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NSDictionary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;missingError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;      
      &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localisedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localisation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forKeyPath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localisedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;missingError&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-tsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;extension&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localised&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;LocalizationService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getStringForKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note: this is a starting point for pseudo code reference. With my small internal service for localization
complete it was natural to start looking around for other opportunities –&amp;gt;&lt;/p&gt;

&lt;h4 id=&quot;solution-2&quot;&gt;Solution 2:&lt;/h4&gt;
&lt;p&gt;Third party solution and their tradeoffs:&lt;/p&gt;

&lt;p&gt;1 . BartyCrouch, Open source project run in Terminal + Homebrew&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;bartycrouch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pros: Using BartyCrouch and running a few commands from the command line what can even be automated, 
using a build script within your project this can be good to keep your Storyboards/XIBs Strings files updated over time.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure your Localizable.strings files stay updated with newly added keys in code 
using NSLocalizedString and show warnings for duplicate keys or empty values&lt;/li&gt;
  &lt;li&gt;Use the machine translation feature of Microsoft Translator Text API via translate&lt;/li&gt;
  &lt;li&gt;Let BartyCrouch translate it to all supported languages in a single line &amp;amp; 
without ever leaving the code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Important : Localization Workflow via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;transform-&lt;/code&gt; feature formatted localized Strings 
are not supported by this automatic feature.
Transform from NSLocalizedString or BartyCrouch.translate doesn’t support the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LocalizedStringKey&lt;/code&gt; type yet. 
Not ready to be used in SwiftUI fully (more in this issue)
Steps for BartyCrouch translate:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Set up Azure (the GLOBAL configuration is the option that takes (location) of all near by servers is fastest)&lt;/li&gt;
  &lt;li&gt;Run the update script in the Compile Sources - Xcode&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Translate feature: 🏁&lt;a href=&quot;https://share.cleanshot.com/oFn4el&quot;&gt;LiveDemo on Cleanshot&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Had some issue here as I am getting success in translation but no output.
NOTE:❗️Troubleshooting BartyCrouch error: no file found Library not loaded:libSwiftSyntax.dylib&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;I posted on &lt;a href=&quot;https://github.com/FlineDev/BartyCrouch/issues/252&quot;&gt;Github BartyCrouch OSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2 . Crowdin
I heard a lot of folks in iOS community using this service which is cloud-based localization platform for continuous software localization projects.
With Crowdin you have the option to work with freelance translators and volunteers but also aspecialized software localization company.
Up to &lt;strong&gt;60,000 hosted words&lt;/strong&gt; it is free of charge.&lt;/p&gt;

&lt;p&gt;3 . Applanga
Same as Crowdin but much better CI and automation delivery for native platforms with tests.
Basic sunscription starts from &lt;strong&gt;49$month&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;solution-3&quot;&gt;Solution 3:&lt;/h3&gt;
&lt;p&gt;Static localization. No need to use key-based translations:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NSLocalizedString(“Text”, value: “Hello World”, comment: “Main label”)&lt;/code&gt; →&lt;/p&gt;

&lt;p&gt;From iOS15+ there is no need to use key-based translations:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String(localised: “Text”, defaultValue: “Text”, comment: “This is Text”)&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;workflow-app-default-one&quot;&gt;Workflow (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app&lt;/code&gt; default one)&lt;/h3&gt;

&lt;p&gt;Usually I will start with English as the base language as default, then slowly adding more language support on top of it. Before using any tools we need to prepare our app for DEFAULT language.
By default, a base language will be provided by Xcode. This base language will act as a fallback language if any localizable content is not found. In my test project since I am not using localized STORYBOARDS DefaultLocalizable.string file is the default English language that must contain all the text of the app for fallback.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Create Localizable.string file&lt;/li&gt;
  &lt;li&gt;Always wrap user-facing strings with (iOS13&amp;amp;14) NSLocalizedString, (from iOS 15+) String(localized:) or LocalizedStringResource&lt;/li&gt;
  &lt;li&gt;Created swift script that takes all .strings and creates enum from it 
(NSLocalizedString does not support being hidden behind macros. This does work for String(localized:), LocalizedStringResource, and similar Swift API)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Few tips from session @Apple Localization Lab:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create Localizable.string file&lt;/li&gt;
  &lt;li&gt;Always wrap user-facing strings with (iOS13&amp;amp;14) NSLocalizedString or
From iOS 15+ String(localized:) / LocalizedStringKey
Note: Will detect the App language:
NSLocalizedString() → short for Bundle.main.localizedString()
Exporting for localization in SwiftUI
🤙🏽 Xcode project build settings &lt;strong&gt;Use Compiler to Extract Swift Strings&lt;/strong&gt;
Once active, before exporting strings for localization, Xcode will build all project targets and use the compiler type information to extract LocalizedStringKeys from your SwiftUI code.
In Xcode .xcloc a.k.a. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Xcode Localization Catalogs&lt;/code&gt; can be opened directly in Xcode with the new Localization Catalog Editor 🤙🏽
Needs to be set to &lt;strong&gt;YES&lt;/strong&gt; if project uses SwiftUI for Exporting all targets in Catalog&lt;br /&gt;
This is the file it will expose into: &lt;strong&gt;en.xclocc&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can use comments for easier translation all and more here
Spanish &amp;amp; English language got a new custom Markdown
The main purpose of Automatic Grammar Agreement however, to make the translation of plural and gendered texts
so far better to use stringdict&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;All edge cases:&lt;/strong&gt;
Localization of dynamic text&lt;/p&gt;

&lt;p&gt;In case the strings(translations) are coming from the server:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bundle.main.preferredLocatizations.first&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Check the current running application language, if it is Spanish than show the Spanish text, else show the English one.&lt;/p&gt;

&lt;p&gt;Plural and Gender Support
using .stringdict
String.localizedStringWithFormat(formatString, count)&lt;/p&gt;

&lt;p&gt;TIP: If you try to translate English phrases word-for-word into Spanish or German, they will make no sense. For this reason, you may need to create more than one version of each string and write instructions about which variant should be used from .string file.&lt;/p&gt;

&lt;p&gt;Gender and personalisation with:
Using date, currencies and number &lt;strong&gt;formatters&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Dates
Unicode.org for &lt;a href=&quot;http://www.unicode.org/reports/tr35/tr35-31/tr35.html&quot;&gt;TEMPLATES&lt;/a&gt;
→ use templates : make data user-friendly with preferredLanguages detected from device&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dateFormatter.locale = Locale(identifier: Locale.preferredLanguages.first ?? “en”)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or use the current locale of the app gives the same result&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dateFormatter.locale = .current&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Dynamic Dates →&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;let allServerLanguages = [”en”, “es”, “de”, “it”]
let language = Bundle.preferredLocalizations(from: allServerLanguages).first

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;swiftui&quot;&gt;SwiftUI&lt;/h3&gt;
&lt;p&gt;This part is specific for SwiftUI apps for the moment.
Usually the translation process should happen based on a user action.&lt;/p&gt;

&lt;p&gt;Translation/TranslationSession API is making this possible now with multiple translations for iOS18.
To translate a batch of requests in different languages, do not try to do so in a single batch of requests. 
This API maked multiple langauge translations natively.&lt;/p&gt;

&lt;p&gt;For Previews make sure you output is in localisation to avoid unnecessary work for translators when exported:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Text(verbatim: “This is content”)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;returns text as it is - hence the verbatim argument name&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;🚫 NEVER give SwiftUI elements FIXED HEIGHT this way the localised Text will be cut off 🚫 (another post on this sizes).
In iOS16 this is solved with
Labels/Text need to be flexible in height and width if we use GRID layout or .ViewThatFits — than it is easier.&lt;/p&gt;
&lt;div class=&quot;language-tsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;alignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;leading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GridRow&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;This is content&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;NOTE: on WatchOS this is specially important so use - .ViewThatFits&lt;/p&gt;
&lt;div class=&quot;language-tsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ViewThatFits&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Inside that view place for:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;expected view layout&lt;/li&gt;
  &lt;li&gt;one for complex looking translated languages&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On WatchOS and Extentions we need to specify a BUNDLE from where we are getting the translation from .framework if it is from Cocoapods or SPM
if it is inside host app than .main or .module for SPM&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String(localised: “Text”, bundle: .main, comment: “”)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Attributedstrings — from iOS15+ the are also localized&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AttributtedStrings(localised: “Text”, comment:””)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;or use Automatic Grammar agreement with mark-down strings (less control tho)&lt;/p&gt;

&lt;h3 id=&quot;uitests&quot;&gt;UITests&lt;/h3&gt;
&lt;p&gt;Saved screenshots form UITests are now localizable for App Store (from Xcode 13+)
To test all the String that are localizable use Edit Scheme -&amp;gt; Pseudolanguage in SwiftUI&lt;/p&gt;

&lt;p&gt;Let AI write automated UI tests to verify the correctness of translations. Use XCTest to ensure that UI elements display the correct localised strings.&lt;/p&gt;
&lt;div class=&quot;language-tsx highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testLocalization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XCUIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;launchArguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;-AppleLanguages&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;(fr)&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;// Check a localized string&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;XCTAssertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;staticTexts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;welcomeMessage&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Bienvenue&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Set up your CI/CD pipeline to automatically fetch the latest translations from server before building the app.
Use scripts in your CI configuration (e.g., GitHub Actions, Jenkins) to integrate this step.&lt;/p&gt;

&lt;h3 id=&quot;final-thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;p&gt;In Summary I have chosen &lt;strong&gt;SOLUTION 1&lt;/strong&gt; for my dynamic translations but there’s no right answer. It varies from project to project. 
Maybe some of the researched and tested options above can help you tailor to your next project?
Some basics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Extracted LocalizeStringKeys / NSLocalizedString&lt;/li&gt;
  &lt;li&gt;Turn on Use Compiler to Extract Swift Strings project build setting&lt;/li&gt;
  &lt;li&gt;Internationalize my code with formatting&lt;/li&gt;
  &lt;li&gt;Style my localized strings with Markdown&lt;/li&gt;
  &lt;li&gt;Used Text() to add comments for translation context&lt;/li&gt;
  &lt;li&gt;Integrated localization tests with CI pipline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By combining these strategies, developers can mitigate the challenges associated with localisation in the Apple ecosystem, without the constant need for app resubmissions.
I asked ChatGPT to write the conclusion to this post in style of futurist &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ray Kurzweil&lt;/code&gt;. I got pretty lovely analogy.&lt;br /&gt;
Localisation stands as a pivotal element within ubiquitous computing ecosystem. Just as the neurons in our brain work effortlessly to interpret and respond to our surroundings, localisation ensures that our devices, from mobile phones to cars and even smart refrigerators, communicate with us in our native languages/dialects. This process must be as precise and reliable same as the synaptic transmissions within our neural networks.&lt;/p&gt;

&lt;p&gt;Shout me &amp;amp; I will be so happy to try new approaches! ✉️&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Jun 2024 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/blog/2024/06/19/all-things-localization/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/blog/2024/06/19/all-things-localization/</guid>
        
        
        <category>iOS</category>
        
        <category>Localization</category>
        
        <category>Watch OS</category>
        
      </item>
    
      <item>
        <title>SwiftUI vs Auto Layout and frames</title>
        <description>&lt;p&gt;A
good section of this post is about the research + a project “Diagram” and steps I wish somebody told me upfront. Before I dive into Auto Layout, should I remind you also of legacy in frames 😝, masks — you always had to tell buttons and other controls how big they should be, either by setting their frame or bounds properties or by resizing them in Interface Builder. But it turns out that most controls are perfectly capable of determining how much space they need, based on their — content. 🌈🦄🌈
🕵️‍♀️ 🕵️‍♀️ Note: There is a tool Scherlock — it lets you edit views and layout constraints in real time, simulate running on other devices, and jump straight to the source code, all from your iOS Simulator — zero configuration required only $$ after trial.&lt;/p&gt;

&lt;p&gt;Things I want to accomplish:⏎
— Solve errors in layout IB Auto Layout
— Solve errors in code Auto Layout&lt;/p&gt;

&lt;!-- more --&gt;
&lt;p&gt;Note: Types of errors in Auto Layout:Unsatisfiable Layouts. Your layout has no valid solution. For more information, see Unsatisfiable Layouts.Ambiguous Layouts. Your layout has two or more possible solutions. For more information, see Ambiguous Layouts.Logical Errors.
🕵️‍♀️ 🕵️‍♀️ Note: There is a tool WTFAutoLayout a place where you can decode the warrning messages.
— Demo the findings in project “Diagram” with IB + code constraints
Things I accomplished: ✅
— When and why to use AutoLayoutThis whole section could be “How to understand blue, yellow and red lines”, but I’ll go into each part separately.&lt;/p&gt;

&lt;p&gt;IMAGE HERE&lt;/p&gt;

&lt;p&gt;When and why to use IB Constraint?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;When we want dynamic content.&lt;/li&gt;
  &lt;li&gt;Less code more constraints rules
Tip pic below: when to update and when to resolve constraints out of the box (Xcode)
`&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When and why to use NSLayout ConstraintNSLayout Constraint API is used when views needs to be synced programmatically. It is robust but stable API. You have three choices when it comes to programmatically creating constraints: You can use layout anchors, you can use the NSLayoutConstraint class, or you can use the Visual Format Language. But what we are interested here mostly is the User interface constraint system and Auto Layout. You can use handy frameworks like Snapkit &amp;amp; TinyConstraint to help with setting programmatic constraints.&lt;/p&gt;

&lt;h2 id=&quot;lets-dive-into-the-important-concepts-in-al--intrinsic-content-size&quot;&gt;Let’s dive into the important concepts in AL: ⇨ Intrinsic content size&lt;/h2&gt;

&lt;p&gt;UI Elements that have INTRINSIC CONTENT SIZE:⇨ UILabel, UIButton, Textfield, SwitchesHere is Apples Design Guide
Implementing both solutions works — the intrinsicContentSize method as well as specify the intrinsic Size in Interface Builder. Because function is only determined at runtime, the interface builder needs some placeholder values to visualize the UI. Without entering those placeholder values into the interface builder, you may get some warnings about missing constrains. However, whatever you enter will be used as a placeholder only, the CGSize returned from the method intrinsicContentSize is still the actual value.
Example: the correct way for a view to specify views height is through intrinsicContentSize.&lt;/p&gt;

&lt;p&gt;Another concepts in AL: ⇨ Hugging / Compression Resistance
Hugging ⇨ content does not want to grow — maxCompression Resistance ⇨ content does not want to shrink — min&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;How to remove the yellow lines and warnings:
Tip on concepts above: when yellow lines and warnings in debugger (Xcode) appear. Fixing it with setting last bottom constraint to lower priority is usually the trick.
🤷‍ 🤷‍♀️ 🤟🤟🤟🤟
But this will break the view if the elements need to be animated or moved since every solution animates the constant property and not the priority. Here a workaround is to put a wrapper view, set wrapper.clipsToBounds = true, and animate wrapper’s constraint.
Conclusion
What ever approach you take keep in mind that written in code will be executed in runtime and override the IB rules. Other option that will not create so much confustion is to set all views in code. Down side to that its more timeconsuming and requires third party dependency in most cases. So keep the IB rules of basic structure:
~~ start constraints from top to bottom
~~ every element minimal 3–4 constraints
~~ use wrapper views when animating and self contained views
~~ uiview Subclass should never add constraints to its superview
If you have any suggestions or other comments, let me know below.
Here are some good reference in detail explained.
Auto layout best practices for minimum pain
Auto layout is a great tool, it helps keep our sanity as developer, and it prevent us lazy people from using magic…&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 10 Feb 2023 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/blog/blog/2023/02/10/swiftui-vs-autolayout/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/blog/2023/02/10/swiftui-vs-autolayout/</guid>
        
        
        <category>UI</category>
        
        <category>UX</category>
        
        <category>Animation</category>
        
      </item>
    
      <item>
        <title>Short thoughts dumped on JSON parsing in Swift 5</title>
        <description>&lt;p&gt;Networking code can definitely be improved. Thanks Apple! No third parties here!
👌 So since Swift 4 we got Codable with Decodable and Encodable protocols that 
provide support for native class (reference type), struct and enum as well (value types) all concrete data types…&lt;/p&gt;

&lt;p&gt;First of all Codable is defined as typealias Codable = Decodable &amp;amp; Encodable and we go for two required protocols:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Decodable: to parse JSON (get response)&lt;/li&gt;
  &lt;li&gt;By decoding the JSONData we will receive/read the data
    &lt;ol&gt;
      &lt;li&gt;Encodable: to generate JSON (post response)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;To convert your codable type into Data.&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;in-practice&quot;&gt;In practice&lt;/h2&gt;
&lt;p&gt;It works with primitive types (Int, String and Float etc.), some Foundation types (Data, URL, Date etc.) as well as with arrays, dictionaries and optionals(Enums).&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;NSData&lt;/li&gt;
  &lt;li&gt;NSString&lt;/li&gt;
  &lt;li&gt;NSNumber
    &lt;ul&gt;
      &lt;li&gt;UInt&lt;/li&gt;
      &lt;li&gt;Int&lt;/li&gt;
      &lt;li&gt;Float&lt;/li&gt;
      &lt;li&gt;Double&lt;/li&gt;
      &lt;li&gt;Bool&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;NSDate&lt;/li&gt;
  &lt;li&gt;NSArray&lt;/li&gt;
  &lt;li&gt;NSDictionary
Why?&lt;/li&gt;
  &lt;li&gt;To simplify dependencies in our Data Manager&lt;/li&gt;
  &lt;li&gt;Converting data structures to JSON data has never been easier(hmmmm..), allowing developers to store JSON data to disk or encode it into a URLRequest’s httpBody.
You can write an app that uses JSON from an external source or tests from a stub. The start problem here the inconsistencies between the structure of the concepts you’re modeling in your app and concepts modeled by the producer of the JSON. Some examples of changing and using JSON structure in your app:&lt;/li&gt;
  &lt;li&gt;Change name properties with CodingKey
    &lt;ol&gt;
      &lt;li&gt;Simplify the complex structure with Encoding and Decoding manually 📝&lt;/li&gt;
      &lt;li&gt;Work with Nested Data (array inside of an array JSON)
For 1. even tho we do not have to parse every element of JSON representation, we need to create properties with same name as in JSON Data or rename them with CodingKey for direct persistent storage for basic examples. Easy peasy so far! 🤠🤠
Essential tasks here at the object level:&lt;/li&gt;
      &lt;li&gt;Identify Objects&lt;/li&gt;
      &lt;li&gt;Use nested type for supporting or to hide complexity
🃏♦️🃏
struct SurfBoard: Codable {
 var brand: String
 var size: Size&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum CodingKeys: String, CodingKey {
    case brand = &quot;name&quot;
    case size
} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;struct Size: Codable {
    var width: Double
    var height: Double
}
Note: For JSON properties that declares in NULL element we need to mirror that instance with ❓Optional. This way, data isn’t silently lost as a result of typos or a misunderstanding of the guarantees made by the provider of the JSON.
For 2. in that case, you can provide your own custom logic 📝 of Encodable and Decodable to define your own encoding and decoding logic. You need to implement encode(to:) and init(from:) methods of Encodable and Decodable protocols explicitly.
On that note:
The tool that I find very useful in creating model structs faster is QuickType which is a desktop application that turns JSON into Codable with typealias for collections. I use it with copyright in comments and Equatable and Hashable protocols for making sure that collection is not duplicated…
Here is when the JSON goes wild and we need to taim it:
struct SurfBoard {
    var brand: String
    var size: Size&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;enum CodingKeys: String, CodingKey {
    case brand = &quot;name&quot;
    case width
    case height
} }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;extension SurfBoard: Encodable {
    func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(brand, forKey: .title)
        try container.encode(size.width, forKey: .width)
        try container.encode(size.height, forKey: .height)
    }
}&lt;/p&gt;

&lt;p&gt;extension SurfBoard: Decodable {
    init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        brand = try values.decode(String.self, forKey: .brand)
        let width = try values.decode(Double.self, forKey: .width)
        let height = try values.decode(Double.self, forKey: .height)
        size = Size(width: width, height: height)
    }
}
You can get nice use scenario here and here ✅.
For 3. in that case of Nested Data you need to decode and read the JSON. The decodable type serves as an intermediate type that’s safe to decode. It serves as the data source in an initializer for the type that you’ll use in the rest of your app.
//Swift structural incompatibility with external JSON
struct SurfBoard {
    var brand: String
    var products: [Products]&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;struct Products: Codable {
    var name: String
    var points: Int
    var description: String?
} } The JSON returned by the API contains more information than is needed to populate the corresponding Swift type. //Swift structure that we need for the nested Arrays struct SurfBoard: Decodable {
let brand: String
let aisles: [Aisle]
struct Aisle: Decodable {
    let name: String
    let shelves: [Shelf]
    struct Shelf: Decodable {
       let name: String
       let product: SurfStore.Product
    }
} } The extension adds an initializer that takes a SurfBoardService instance and removes the unnecessary nesting by looping through and discarding the aisles and shelves. To extract the data you need from the outer array, you write a type that mirrors the shape of the source JSON and mark it as Decodable. Then, write an initializer on the type you’ll use in the rest of your app that takes an instance of the type that mirrors the source JSON. extension SurfStore {
init(from service: SurfBoardService) {
     brand = service.brand
     products = []
     for aisle in service.aisles {
       for shelf in aisle.shelves {
         products.append(shelf.product)
        }
     }
 }  } On that note: Extensions can only provide convenience initializers * 		Initializers that are implemented as a result of protocol conformance must be marked as required(on classes). * 		required init can only be implemented within the body of a class. * 		Structs can have initializers in extensions because there is no inheritance. AND FINALLY READ THE NESTED JSON… let decoder = JSONDecoder() let serviceStores = try decoder.decode([SurfBoardService].self,        from: json)
 let stores = serviceStores.compactMap { SurfBoard(from: $0) } for store in stores {
 print(&quot;\(store.name) is selling:&quot;)
for product in store.products { 
   print(&quot;\t\(product.name) (\(product.points) points)&quot;)
      if let description = product.description {
      print(&quot;\t\t\(description)&quot;)
 }    } } more in documentation: Merge Data from Different Depths Feel free to leave comments if you have any doubts 🙂 Thank you! Reference on: https://hackernoon.com/everything-about-codable-in-swift-4-97d0e18a2999 http://aplus.rs/2017/highly-maintainable-app-architecture/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Wed, 07 Sep 2022 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/blog/2022/09/07/json-parsing/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/blog/2022/09/07/json-parsing/</guid>
        
        
        <category>Networking</category>
        
        <category>Generics</category>
        
        <category>Swift</category>
        
      </item>
    
      <item>
        <title>Breaking the magic of Apple HealthKit API and Watch OS</title>
        <description>&lt;p&gt;Things I want to accomplished: ✅
Small tips on setup and easier use
lll
ppp
pp&lt;/p&gt;

&lt;p&gt;TO DO&lt;/p&gt;

&lt;!-- more --&gt;

</description>
        <pubDate>Tue, 23 Aug 2022 00:00:00 +0200</pubDate>
        <link>http://localhost:4000/blog/blog/2022/08/23/apple-healthkit/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/blog/2022/08/23/apple-healthkit/</guid>
        
        
        <category>Privacy</category>
        
        <category>Cookies</category>
        
        <category>GDPR</category>
        
        <category>CCPA</category>
        
      </item>
    
      <item>
        <title>Artsy's Culture Stack, 2017</title>
        <description>&lt;!-- This comes out of the tech stack 2017, and isn't up for review yet --&gt;

&lt;h1 id=&quot;people-and-culture&quot;&gt;People and Culture&lt;/h1&gt;

&lt;h2 id=&quot;open-source-by-default&quot;&gt;Open Source by Default&lt;/h2&gt;

&lt;p&gt;By the end of 2016, almost every major front-end application at Artsy was &lt;a href=&quot;http://code.dblock.org/2015/02/09/becoming-open-source-by-default.html&quot;&gt;Open Source by Default&lt;/a&gt;. This means looking for reasons for something to be closed-source as opposed to reasons to be open. Our entire working process is done in the open, from developer PRs to QA. This post was also written collaboratively and in the open as you can see &lt;a href=&quot;https://github.com/artsy/artsy.github.io/pull/325&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Sometimes it makes sense to keep some details private for competitive reasons. We therefore also create a private GitHub repository for front-end teams that require cross-project issues and team milestones. This is done using &lt;a href=&quot;https://www.zenhub.com&quot;&gt;ZenHub&lt;/a&gt;, and is managed by Engineering leads and Product Managers.&lt;/p&gt;

&lt;h2 id=&quot;developer-workflow&quot;&gt;Developer Workflow&lt;/h2&gt;

&lt;p&gt;Most development workflow tries to mimic large open-source project development where most work happens on forks and is pull-requested into an Artsy repository shared by everyone. Typically an engineer will start a project, application or service and is automatically its benevolent dictator. They will add continuous integration and will ask other engineers on the team to code review everything from day one. Others will join and entire teams may take over. Continuous deployment and other operational infrastructure will get setup early.&lt;/p&gt;

&lt;p&gt;In some of our newer apps we have switched to PR based deployments via CIs. In this case, on Artsy’s repository, we would have &lt;em&gt;master&lt;/em&gt; and &lt;em&gt;release&lt;/em&gt; branches where &lt;em&gt;master&lt;/em&gt; is the default branch and all the PRs are made to master. Once a PR is reviewed and merged to &lt;em&gt;master&lt;/em&gt; it will automatically get deployed on staging. Production deployment is a pull request from &lt;em&gt;master&lt;/em&gt; to a &lt;em&gt;release&lt;/em&gt; branch, this way we know what commits are going to be deployed in this release. Once merged, CI will automatically deploy the &lt;em&gt;release&lt;/em&gt; branch to production.&lt;/p&gt;

&lt;h2 id=&quot;slack&quot;&gt;Slack&lt;/h2&gt;

&lt;p&gt;Originally the engineering team used IRC, but in 2015 we switched to Slack and encouraged its use throughout the whole company. We’re now averaging about 16,000 Slack messages a day inside Artsy.&lt;/p&gt;

&lt;p&gt;Slack usage started out small, but as the Artsy team grew, so did the number of locations where people worked. Encouraging people to move from disparate private conversations in different messaging clients to using slack channels has really made it easier to keep people in the loop. It’s made it possible to have the serendipitous collaboration you get by overhearing something important nearby physically.&lt;/p&gt;

&lt;h2 id=&quot;global-engineering&quot;&gt;Global Engineering&lt;/h2&gt;

&lt;p&gt;While most Engineers live in New York, our Engineering team has contributors in Amsterdam, Berlin, Seattle, Minneapolis, Boston and London. We’ve not shied away from hiring regardless of locations.&lt;/p&gt;

&lt;p&gt;To help people know each-other across the company we developed and open-sourced a &lt;a href=&quot;https://github.com/artsy/team-navigator&quot;&gt;team navigator&lt;/a&gt;. We also facilitate weekly meetings between any three people across the company with a tool called &lt;a href=&quot;https://github.com/ilyakava/sup&quot;&gt;sup&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Maybe worth mentioning that most of the channels shared between developers and other people at artsy(specialists, designers, product people, etc) which encourages collaboration and integration of art+technology as well. Also maybe worth mentioning that we have dedicated help channels per product team and well as company wide help channel.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sun, 05 Mar 2017 00:00:00 +0100</pubDate>
        <link>http://localhost:4000/blog/blog/2017/03/05/artsy-engineering-culture-2017/</link>
        <guid isPermaLink="true">http://localhost:4000/blog/blog/2017/03/05/artsy-engineering-culture-2017/</guid>
        
        
        <category>Technology</category>
        
        <category>eigen</category>
        
        <category>force</category>
        
        <category>gravity</category>
        
      </item>
    
  </channel>
</rss>
